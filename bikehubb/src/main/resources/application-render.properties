# ==============================================================================
# CONFIGURAÇÃO RENDER.COM
# ==============================================================================

# Configuração do banco de dados via variáveis de ambiente
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate/JPA - Produção
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.show-sql=false

# Pool de conexão otimizado para Render
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# Logs otimizados para produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.root=INFO
logging.level.com.legacycorp.bikehubb=INFO

# JWT via variável de ambiente (mais seguro)
jwt.secret=${JWT_SECRET:Gl7w8l5EO0z8lfnxssXKTeObnJGSUnxD3rBhmDzcs62V9O8CXoj/pLBAjP646Tq+Uo2WaOAgCn+8oyEE0q17Jw==}

# Stripe via variáveis de ambiente
stripe.secret.key=${STRIPE_SECRET_KEY}
stripe.publishable.key=${STRIPE_PUBLISHABLE_KEY}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}

# Configuração do servidor
server.port=${PORT:8080}

# CORS para produção - URLs específicas para permitir credenciais
spring.web.cors.allowed-origins=https://bikehubb.netlify.app,https://bikehubbbackend.onrender.com,http://localhost:3000,http://localhost:3001,http://localhost:4200,http://localhost:4201
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
