package com.legacycorp.bikehubb.controller;

import com.legacycorp.bikehubb.createAdvertisement.dto.PaymentRequest;
import com.legacycorp.bikehubb.security.JwtUtil;
import com.legacycorp.bikehubb.createAdvertisement.model.Bicycle;
import com.legacycorp.bikehubb.createAdvertisement.repository.AdvertisementRepository;
import com.legacycorp.bikehubb.createAdvertisement.repository.UserRepository;
import com.legacycorp.bikehubb.model.User;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionCreateParams;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/api")
public class PaymentController {

    @Value("${stripe.secret.key}")
    private String stripeSecretKey;

    @Autowired
    private AdvertisementRepository advertisementRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private JwtUtil jwtUtil;

    /**
     * Cria uma sess√£o de checkout do Stripe para pagamento de an√∫ncio
     * @param request Dados do pagamento (anuncio ID, etc.)
     * @param authHeader Token JWT de autentica√ß√£o
     * @return URL de checkout do Stripe ou erro
     */
    @PostMapping("/create-checkout-session")
    public ResponseEntity<?> createCheckoutSession(
            @RequestBody PaymentRequest request,
            @RequestHeader(value = "Authorization", required = true) String authHeader) {
        
        try {
            System.out.println("=== INICIANDO CRIA√á√ÉO DE SESS√ÉO DE CHECKOUT ===");
            System.out.println("Request recebido para Advertisement ID: " + request.getAdvertisementId());
            
            // Verificar se o header Authorization foi enviado
            if (authHeader == null || authHeader.trim().isEmpty()) {
                System.err.println("‚ùå Header Authorization n√£o fornecido");
                return ResponseEntity.status(401).body(Map.of("error", "Token de autentica√ß√£o √© obrigat√≥rio"));
            }
            
            // Validar token JWT
            if (!jwtUtil.validateToken(authHeader)) {
                System.err.println("‚ùå Token JWT inv√°lido");
                return ResponseEntity.status(401).body(Map.of("error", "Token inv√°lido ou expirado"));
            }
            
            // Extrair userId do token JWT
            String externalId = jwtUtil.extractUserIdAsString(authHeader);
            System.out.println("‚úÖ ExternalId extra√≠do do token: " + externalId);
            
            // Validar dados da requisi√ß√£o
            if (request.getAdvertisementId() == null) {
                return ResponseEntity.badRequest().body(Map.of("error", "ID do an√∫ncio √© obrigat√≥rio"));
            }
            
            // Configurar chave secreta do Stripe
            Stripe.apiKey = stripeSecretKey;
            
            // Validar usu√°rio
            Optional<User> userOpt = userRepository.findByExternalId(externalId);
            if (userOpt.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of("error", "Usu√°rio n√£o encontrado"));
            }
            User user = userOpt.get();
            
            // Validar an√∫ncio
            UUID advertisementId = request.getAdvertisementId();
            Optional<Bicycle> advertisementOpt = advertisementRepository.findById(advertisementId);
            if (advertisementOpt.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of("error", "An√∫ncio n√£o encontrado"));
            }
            
            Bicycle advertisement = advertisementOpt.get();
            System.out.println("‚úÖ An√∫ncio encontrado: " + advertisement.getTitle());
            
            // Verificar se o an√∫ncio pertence ao usu√°rio
            if (!advertisement.getOwner().equals(user.getId())) {
                return ResponseEntity.badRequest().body(Map.of("error", "Usu√°rio n√£o √© o propriet√°rio deste an√∫ncio"));
            }
            
            // Definir valores do pagamento - VALOR FIXO de R$ 3,00 para publica√ß√£o
            BigDecimal amount = new BigDecimal("3.00"); // Valor fixo para publica√ß√£o de an√∫ncio
            long amountInCents = amount.multiply(new BigDecimal("100")).longValue(); // Converter para centavos (300 centavos)
            
            System.out.println("üí∞ Valor do pagamento: R$ " + amount + " (" + amountInCents + " centavos)");
            System.out.println("üìã Pre√ßo original da bicicleta: R$ " + advertisement.getPrice() + " (apenas para refer√™ncia)");
            
            // Criar sess√£o de checkout do Stripe
            SessionCreateParams params = SessionCreateParams.builder()
                .setMode(SessionCreateParams.Mode.PAYMENT)
                .setSuccessUrl("https://bikehubbfrontend.netlify.app/success?session_id={CHECKOUT_SESSION_ID}")
                .setCancelUrl("https://bikehubbfrontend.netlify.app/cancel")
                .addLineItem(
                    SessionCreateParams.LineItem.builder()
                        .setPriceData(
                            SessionCreateParams.LineItem.PriceData.builder()
                                .setCurrency("brl")
                                .setProductData(
                                    SessionCreateParams.LineItem.PriceData.ProductData.builder()
                                        .setName("BikeHubb - Publica√ß√£o de An√∫ncio")
                                        .setDescription("Publica√ß√£o do an√∫ncio: " + advertisement.getTitle())
                                        .build()
                                )
                                .setUnitAmount(amountInCents)
                                .build()
                        )
                        .setQuantity(1L)
                        .build()
                )
                .putMetadata("advertisement_id", advertisementId.toString())
                .putMetadata("user_external_id", externalId)
                .putMetadata("user_email", user.getEmail())
                .build();

            Session session = Session.create(params);
            
            System.out.println("‚úÖ Sess√£o Stripe criada com ID: " + session.getId());
            System.out.println("üîó URL de checkout: " + session.getUrl());
            
            // Criar resposta
            Map<String, Object> response = new HashMap<>();
            response.put("sessionId", session.getId());
            response.put("checkoutUrl", session.getUrl());
            response.put("advertisementId", advertisementId);
            response.put("amount", amount);
            response.put("status", "created");
            
            return ResponseEntity.ok(response);
            
        } catch (StripeException e) {
            System.err.println("‚ùå Erro do Stripe: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of("error", "Erro ao criar sess√£o de pagamento: " + e.getMessage()));
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Erro de valida√ß√£o: " + e.getMessage());
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            System.err.println("‚ùå Erro inesperado: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("error", "Erro interno do servidor"));
        }
    }
}